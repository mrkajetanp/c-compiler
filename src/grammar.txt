==========================
AST Definition
==========================

program = Program(function_definition)
function_definition = Function(identifier name, statement body)
statement = Return(exp)
exp = Constant(int) | Unary(unary_operator, exp) | Binary(binary_operator, exp, exp)
unary_operator = Complement | Negation
binary_operator = Add | Subtract | Multiply | Divide | Remainder

==========================
Grammar
==========================

<program> ::= <function>
<function> ::= "int" <identifier> "(" "void" ")" "{" <statement> "}"
<statement> ::= "return" <exp> ";"
<exp> ::= <factor> | <exp> <binop> <exp>
<factor> ::= <int> | <unop> <exp> | "(" <exp> ")"
<unop> ::= "-" | "~"
<binop> ::= "-" | "+" | "*" | "/" | "%"
<identifier> ::= ? Identifier token ?
<int> ::= ? Constant token ?

==========================
IR Definition
==========================

program = Program(function_definition)
function_definition = Function(identifier, instruction* body)
instruction = Return(val)
            | Unary(unary_operator, val src, val dst)
            | Binary(binary_operator, val src1, val src2, val dst)
val = Constant(int) | Var(identifier)
unary_operator = Complement | Negation
binary_operator = Add | Subtract | Multiply | Divide | Remainder

==========================
ASM Definition
==========================

program = Program(function_definition)
function_definition = Function(identifier, instruction* body)
instruction = Mov(operand src, operand dst)
    | Unary(unary_operator, operand)
    | Binary(binary_operator, operand, operand)
    | Idiv(operand)
    | Cdq
    | AllocateStack(int)
    | Ret
unary_operator = Neg | Not
binary_operator = Add | Sub | Mult
operand = Imm(int) | Reg(reg) | Pseudo(identifier) | Stack(int)
reg = AX | DX | R10 | R11
