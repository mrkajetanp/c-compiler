==========================
AST Definition
==========================

program = Program(function_declaration*)
function_declaration = (identifier name, identifier* params, block? body)
variable_declaration = (identifier name, exp? init)
declaration = FunDecl(function_declaration) | VarDecl(variable_declaration)
block = Block(block_item*)
block_item = S(statement) | D(declaration)
statement = Return(exp)
		| Expression(exp)
		| If(exp condition, statement then, statement? else)
		| Compound(block)
		| Break(identifier label)
		| Continue(identifier label)
		| While(exp condition, statement body, identifier label)
		| DoWhile(statement body, exp condition, identifier label)
		| For(for_init init, exp? condition, exp? post, statement body, identifier label)
		| Null
for_init = InitDecl(variable_declaration) | InitExp(exp?)
exp = Constant(int)
		| Var(identifier)
		| Unary(unary_operator, exp)
		| Binary(binary_operator, exp, exp)
		| Assignment(exp, exp)
		| Conditional(exp condition, exp, exp)
		| FunctionCall(identifier, exp* args)
unary_operator = Complement | Negation | Not
binary_operator = Add | Subtract | Multiply | Divide | Remainder | And | Or
	| Equal | NotEqual | LessThan | LessEqualThan | GreaterThan | GreaterEqualThan

==========================
Grammar
==========================

<program> ::= {<function-declaration>}
<declaration> ::= <variable-declaration> | <function-declaration>
<variable-declaration> ::= "int" <identifier> ["=" <exp>] ";"
<function-declaration> ::= "int" <identifier> "(" <param-list> ")" (<block> | ";")
<param-list> ::= "void" | "int" <identifier> {"," "int" <identifier>}
<function> ::= "int" <identifier> "(" "void" ")" <block>
<block> ::= "{" {<block-item>} "}"
<block-item> ::= <statement> | <declaration>
<for-init> ::= <variable-declaration> | [<exp>] ";"
<statement> ::= "return" <exp> ";"
		 | <exp> ";"
		 | "if" "(" <exp> ")" <statement> ["else" <statement>]
		 | <block>
		 | "break" ";"
		 | "continue" ";"
		 | "while" "(" <exp> ")" <statement>
		 | "do" <statement> "while" "(" <exp> ")" ";"
		 | "for" "(" <for-init> [<exp>] ";" [<exp>] ")" <statement>
 		 | ";" 
<exp> ::= <factor> | <exp> <binop> <exp> | <exp> "?" <exp> ":" <exp>
<factor> ::= <int> | <identifier> | <unop> <factor> | "(" <exp> ")"
            | <identifier> "(" [<argument-list>] ")"
<argument-list> ::= <exp> {"," <exp>}
<unop> ::= "-" | "~" | "!"
<binop> ::= "-" | "+" | "*" | "/" | "%" | "&&" | "||"
	| "==" | "!=" | "<" | "<=" | ">" | ">=" 
<identifier> ::= ? Identifier token ?
<int> ::= ? Constant token ?

==========================
IR Definition
==========================

program = Program(function_definition*)
function_definition = Function(identifier name, identifier* params, instruction* body)
instruction = Return(val)
            | Unary(unary_operator, val src, val dst)
            | Binary(binary_operator, val src1, val src2, val dst)
			| Copy(val src, val dst)
			| Jump(identifier target)
			| JumpIfZero(val condition, identifier target)
			| JumpIfNotZero(val condition, identifier target)
			| Label(identifier)
			| FnCall(identifier fn_name, val* args, val dst)
val = Constant(int) | Var(identifier)
unary_operator = Complement | Negation
binary_operator = Add | Subtract | Multiply | Divide | Remainder | And | Or
	| Equal | NotEqual | LessThan | LessEqualThan | GreaterThan | GreaterEqualThan

==========================
ASM Definition
==========================

program = Program(function_definition*)
function_definition = Function(identifier, instruction* body)
instruction = Mov(operand src, operand dst)
    | Unary(unary_operator, operand)
    | Binary(binary_operator, operand, operand)
    | Cmp(operand, operand)
    | Idiv(operand)
    | Cdq
	| Jmp(identifier)
	| JmpCC(cond_code, identifier)
	| SetCC(cond_code, operand)
	| Label(identifier)
    | AllocateStack(int)
	| DeallocateStack(int)
	| Push(operand)
	| Call(identifier)
    | Ret
unary_operator = Neg | Not
binary_operator = Add | Sub | Mult
operand = Imm(int) | Reg(reg) | Pseudo(identifier) | Stack(int)
cond_code = E | NE | G | GE | L | LE
reg = AX | CX | DX | DI | SI | R8 | R9 | R10 | R11
